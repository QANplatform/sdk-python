# coding: utf-8

"""
    QAN AutoApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResponseTransaction(BaseModel):
    """
    ResponseTransaction
    """ # noqa: E501
    access_list: Optional[StrictStr] = Field(default=None, description="A list of addresses and storage keys that the transaction plans to access", alias="AccessList")
    block_hash: Optional[StrictStr] = Field(default=None, description="The hash of the block where this transaction was in. Null when it's a pending transaction", alias="BlockHash")
    block_number: Optional[StrictStr] = Field(default=None, description="The block number where this transaction was in. Null when it's a pending transaction", alias="BlockNumber")
    chain_id: Optional[StrictStr] = Field(default=None, description="The chain id of the transaction, if any", alias="ChainId")
    var_from: Optional[StrictStr] = Field(default=None, description="The address of the sender", alias="From")
    gas: Optional[StrictStr] = Field(default=None, description="The gas provided by the sender, encoded as decimal", alias="Gas")
    gas_price: Optional[StrictStr] = Field(default=None, description="The gas price provided by the sender in wei encoded as decimal", alias="GasPrice")
    hash: Optional[StrictStr] = Field(default=None, description="The hash of the transaction", alias="Hash")
    input: Optional[StrictStr] = Field(default=None, description="The data sent along with the transaction", alias="Input")
    max_fee_per_gas: Optional[StrictStr] = Field(default=None, description="The maximum fee per gas set in the transaction", alias="MaxFeePerGas")
    max_priority_fee_per_gas: Optional[StrictStr] = Field(default=None, description="The maximum priority gas fee set in the transaction", alias="MaxPriorityFeePerGas")
    nonce: Optional[StrictStr] = Field(default=None, description="The number of transactions made by the sender prior to this one encoded as decimal", alias="Nonce")
    r: Optional[StrictStr] = Field(default=None, description="The R field of the signature", alias="R")
    s: Optional[StrictStr] = Field(default=None, description="The S field of the signature", alias="S")
    to: Optional[StrictStr] = Field(default=None, description="The address of the receiver. Null when its a contract creation transaction", alias="To")
    transaction_index: Optional[StrictStr] = Field(default=None, description="The integer of the transaction's index position that the log was created from. Null when it's a pending log", alias="TransactionIndex")
    type: Optional[StrictStr] = Field(default=None, description="The transaction type", alias="Type")
    v: Optional[StrictStr] = Field(default=None, description="The standardized V field of the signature", alias="V")
    value: Optional[StrictStr] = Field(default=None, description="The value transferred in wei encoded as decimal", alias="Value")
    __properties: ClassVar[List[str]] = ["AccessList", "BlockHash", "BlockNumber", "ChainId", "From", "Gas", "GasPrice", "Hash", "Input", "MaxFeePerGas", "MaxPriorityFeePerGas", "Nonce", "R", "S", "To", "TransactionIndex", "Type", "V", "Value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "AccessList": obj.get("AccessList"),
            "BlockHash": obj.get("BlockHash"),
            "BlockNumber": obj.get("BlockNumber"),
            "ChainId": obj.get("ChainId"),
            "From": obj.get("From"),
            "Gas": obj.get("Gas"),
            "GasPrice": obj.get("GasPrice"),
            "Hash": obj.get("Hash"),
            "Input": obj.get("Input"),
            "MaxFeePerGas": obj.get("MaxFeePerGas"),
            "MaxPriorityFeePerGas": obj.get("MaxPriorityFeePerGas"),
            "Nonce": obj.get("Nonce"),
            "R": obj.get("R"),
            "S": obj.get("S"),
            "To": obj.get("To"),
            "TransactionIndex": obj.get("TransactionIndex"),
            "Type": obj.get("Type"),
            "V": obj.get("V"),
            "Value": obj.get("Value")
        })
        return _obj


