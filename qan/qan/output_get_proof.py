# coding: utf-8

"""
    QAN AutoApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from qan.models.response_storage_entry import ResponseStorageEntry
from typing import Optional, Set
from typing_extensions import Self

class OutputGetProof(BaseModel):
    """
    OutputGetProof
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="A URL to the JSON Schema for this object.", alias="$schema")
    account_proof: StrictStr = Field(description="An array of rlp-serialized MerkleTree-Nodes which starts with the stateRoot-Node and follows the path of the SHA3 address as key", alias="AccountProof")
    address: StrictStr = Field(description="The address associated with the account", alias="Address")
    balance: StrictStr = Field(description="The current balance of the account in wei", alias="Balance")
    code_hash: StrictStr = Field(description="A 32 byte hash of the code of the account", alias="CodeHash")
    nonce: Optional[StrictStr] = Field(description="The hash of the generated proof-of-work. Null if pending", alias="Nonce")
    storage_hash: StrictStr = Field(description="A 32 byte SHA3 of the storageRoot. All storage will deliver a MerkleProof starting with this rootHash", alias="StorageHash")
    storage_proof: List[ResponseStorageEntry] = Field(description="An array of storage-entries as requested. Each entry is an object with the following fields:", alias="StorageProof")
    __properties: ClassVar[List[str]] = ["$schema", "AccountProof", "Address", "Balance", "CodeHash", "Nonce", "StorageHash", "StorageProof"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputGetProof from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "var_schema",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in storage_proof (list)
        _items = []
        if self.storage_proof:
            for _item_storage_proof in self.storage_proof:
                if _item_storage_proof:
                    _items.append(_item_storage_proof.to_dict())
            _dict['StorageProof'] = _items
        # set to None if nonce (nullable) is None
        # and model_fields_set contains the field
        if self.nonce is None and "nonce" in self.model_fields_set:
            _dict['Nonce'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputGetProof from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "$schema": obj.get("$schema"),
            "AccountProof": obj.get("AccountProof"),
            "Address": obj.get("Address"),
            "Balance": obj.get("Balance"),
            "CodeHash": obj.get("CodeHash"),
            "Nonce": obj.get("Nonce"),
            "StorageHash": obj.get("StorageHash"),
            "StorageProof": [ResponseStorageEntry.from_dict(_item) for _item in obj["StorageProof"]] if obj.get("StorageProof") is not None else None
        })
        return _obj


