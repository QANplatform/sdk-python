# coding: utf-8

"""
    QAN AutoApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from qan.models.response_transaction import ResponseTransaction
from qan.models.response_withdrawals import ResponseWithdrawals
from typing import Optional, Set
from typing_extensions import Self

class ResponseBlock(BaseModel):
    """
    ResponseBlock
    """ # noqa: E501
    base_fee_per_gas: Optional[StrictStr] = Field(description="A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade", alias="BaseFeePerGas")
    difficulty: StrictStr = Field(description="The integer of the difficulty for this block encoded as a decimal", alias="Difficulty")
    extra_data: StrictStr = Field(description="The “extra data” field of this block", alias="ExtraData")
    gas_limit: StrictStr = Field(description="The maximum gas allowed in this block encoded as a decimal", alias="GasLimit")
    gas_used: StrictStr = Field(description="The total used gas by all transactions in this block encoded as a decimal", alias="GasUsed")
    hash: Optional[StrictStr] = Field(description="The block hash of the requested block. null if pending", alias="Hash")
    logs_bloom: Optional[StrictStr] = Field(description="The bloom filter for the logs of the block. null if pending", alias="LogsBloom")
    miner: StrictStr = Field(description="The address of the beneficiary to whom the mining rewards were given", alias="Miner")
    mix_hash: StrictStr = Field(description="A string of a 256-bit hash encoded as a decimal", alias="MixHash")
    nonce: Optional[StrictStr] = Field(description="The hash of the generated proof-of-work. null if pending", alias="Nonce")
    number: Optional[StrictStr] = Field(description="The block number of the requested block encoded as a decimal. null if pending", alias="Number")
    parent_hash: StrictStr = Field(description="The hash of the parent block", alias="ParentHash")
    receipts_root: StrictStr = Field(description="The root of the receipts trie of the bloc", alias="ReceiptsRoot")
    sha3_uncles: StrictStr = Field(description="The SHA3 of the uncles data in the block", alias="Sha3Uncles")
    size: StrictStr = Field(description="The size of this block in bytes as an Integer value encoded as decimal", alias="Size")
    state_root: StrictStr = Field(description="The root of the final state trie of the block", alias="StateRoot")
    timestamp: StrictStr = Field(description="The unix timestamp for when the block was collated", alias="Timestamp")
    total_difficulty: StrictStr = Field(description="The integer of the total difficulty of the chain until this block encoded as a decimal", alias="TotalDifficulty")
    transactions: List[ResponseTransaction] = Field(description="An array of transaction objects - please see getTransactionByHash for exact shape", alias="Transactions")
    transactions_root: StrictStr = Field(description="The root of the transaction trie of the block", alias="TransactionsRoot")
    uncles: List[StrictStr] = Field(description="An array of uncle hashes", alias="Uncles")
    withdrawals: ResponseWithdrawals = Field(description="A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade", alias="Withdrawals")
    withdrawals_root: Optional[StrictStr] = Field(description="The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade", alias="WithdrawalsRoot")
    __properties: ClassVar[List[str]] = ["BaseFeePerGas", "Difficulty", "ExtraData", "GasLimit", "GasUsed", "Hash", "LogsBloom", "Miner", "MixHash", "Nonce", "Number", "ParentHash", "ReceiptsRoot", "Sha3Uncles", "Size", "StateRoot", "Timestamp", "TotalDifficulty", "Transactions", "TransactionsRoot", "Uncles", "Withdrawals", "WithdrawalsRoot"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseBlock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transactions (list)
        _items = []
        if self.transactions:
            for _item_transactions in self.transactions:
                if _item_transactions:
                    _items.append(_item_transactions.to_dict())
            _dict['Transactions'] = _items
        # override the default output from pydantic by calling `to_dict()` of withdrawals
        if self.withdrawals:
            _dict['Withdrawals'] = self.withdrawals.to_dict()
        # set to None if base_fee_per_gas (nullable) is None
        # and model_fields_set contains the field
        if self.base_fee_per_gas is None and "base_fee_per_gas" in self.model_fields_set:
            _dict['BaseFeePerGas'] = None

        # set to None if hash (nullable) is None
        # and model_fields_set contains the field
        if self.hash is None and "hash" in self.model_fields_set:
            _dict['Hash'] = None

        # set to None if logs_bloom (nullable) is None
        # and model_fields_set contains the field
        if self.logs_bloom is None and "logs_bloom" in self.model_fields_set:
            _dict['LogsBloom'] = None

        # set to None if nonce (nullable) is None
        # and model_fields_set contains the field
        if self.nonce is None and "nonce" in self.model_fields_set:
            _dict['Nonce'] = None

        # set to None if number (nullable) is None
        # and model_fields_set contains the field
        if self.number is None and "number" in self.model_fields_set:
            _dict['Number'] = None

        # set to None if withdrawals_root (nullable) is None
        # and model_fields_set contains the field
        if self.withdrawals_root is None and "withdrawals_root" in self.model_fields_set:
            _dict['WithdrawalsRoot'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseBlock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "BaseFeePerGas": obj.get("BaseFeePerGas"),
            "Difficulty": obj.get("Difficulty"),
            "ExtraData": obj.get("ExtraData"),
            "GasLimit": obj.get("GasLimit"),
            "GasUsed": obj.get("GasUsed"),
            "Hash": obj.get("Hash"),
            "LogsBloom": obj.get("LogsBloom"),
            "Miner": obj.get("Miner"),
            "MixHash": obj.get("MixHash"),
            "Nonce": obj.get("Nonce"),
            "Number": obj.get("Number"),
            "ParentHash": obj.get("ParentHash"),
            "ReceiptsRoot": obj.get("ReceiptsRoot"),
            "Sha3Uncles": obj.get("Sha3Uncles"),
            "Size": obj.get("Size"),
            "StateRoot": obj.get("StateRoot"),
            "Timestamp": obj.get("Timestamp"),
            "TotalDifficulty": obj.get("TotalDifficulty"),
            "Transactions": [ResponseTransaction.from_dict(_item) for _item in obj["Transactions"]] if obj.get("Transactions") is not None else None,
            "TransactionsRoot": obj.get("TransactionsRoot"),
            "Uncles": obj.get("Uncles"),
            "Withdrawals": ResponseWithdrawals.from_dict(obj["Withdrawals"]) if obj.get("Withdrawals") is not None else None,
            "WithdrawalsRoot": obj.get("WithdrawalsRoot")
        })
        return _obj


